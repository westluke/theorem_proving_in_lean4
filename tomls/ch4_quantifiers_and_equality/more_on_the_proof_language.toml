[[questions]]
type = "MultipleChoice"
prompt.prompt = """
What are the downsides of a `have` statement that doesn't name its subproof? Select all that apply.
"""
prompt.distractors = [
    "The subproof cannot be directly referred to later in the proof.",
    "At most one unnamed `have` statement can appear in a proof."
]
answer.answer = [
    "Without a descriptive name, it's harder to remember what the subproof actually means.",
    "Later unnamed `have` statements will hide previous ones, so they can't be directly referred to."
]

# [[questions]]
# type = "MultipleChoice"
# prompt.prompt = """
# """
# prompt.distractors = []
# answer.answer = ""
# context = ""

#[[questions]]
#type = "MultipleChoice"
#prompt.prompt = """
#Recall that `_` is used to ask Lean to synthesize a term. `(by assumption)` #similarly asks Lean to fill in a proof by finding a proof of the right type in #the context. What is the difference between these two pieces of syntax?
#"""

# 

# 

# Underscore uses TYPE-level information to synthesize placeholders. So it can't just synthesize proofs, cuz they're not present in any types.

# What's wrong with this corner quote proof?
